# Pipeline to create extension VSIX

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - tools/pipelines-tasks

pr: none

variables:
  tasksRoot: 'tools/pipelines-tasks'
  buildOutRoot: '$(Build.ArtifactStagingDirectory)/buildOutput'
  # Version number
  major: '1'
  minor: '1'
  patch: $[counter(variables['minor'], 0)]
  # Upload results of Semmle analysis
  LGTM.UploadSnapshot: true

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows

    customBuildTags:
    - ES365AIMigrationTooling

    stages:
    - stage: BuildVSIX
      jobs:
      - job: Build
        steps:
        - template: /tools/pipelines-tasks/templates/build-steps.yml@self

        - task: TfxInstaller@3
          displayName: 'Use Node CLI for Azure DevOps (tfx-cli): v0.7.x'

        # Package and sign the VSIX
        - task: PackageAzureDevOpsExtension@3
          displayName: 'Package Extension: $(tasksRoot)'
          inputs:
            rootFolder: '$(tasksRoot)'
            patternManifest: 'vss-extension.json'
            outputPath: '$(buildOutRoot)\MsixPackagingExtension.vsix'
            publisherId: 'MSIX'
            extensionVersion: '$(major).$(minor).$(patch)'
            extensionVisibility: public
            updateTasksVersion: true

        # Generate and publish SBoM file
        # It is placed under a _manifest folder by default
        - task: ManifestGeneratorTask@0
          displayName: 'Generate Software Bill of Material (SBoM)'
          inputs:
            BuildDropPath: $(buildOutRoot)
            BuildComponentPath: '$(tasksRoot)'
            AdditionalComponentDetectorArgs: '--DirectoryExclusionList $(tasksRoot)\test'
            PackageName: 'MSIX Packaging Extension'
            PackageVersion: '$(major).$(minor).$(patch)'

        - task: DropValidatorTask@0
          inputs:
            BuildDropPath: $(buildOutRoot)
            OutputPath: $(buildOutRoot)/_manifest/sbom_validation.json
            ValidateSignature: true

        # Sign the package
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
          displayName: 'ESRP CodeSigning'
          inputs:
            ConnectedServiceName: 'ESRP CodeSigning'
            FolderPath: '$(buildOutRoot)'
            Pattern: MsixPackagingExtension.vsix
            signConfigType: inlineSignParams
            inlineOperation: |
              [
               {
                   "KeyCode" : "CP-233016",
                   "OperationCode" : "OpcSign",
                   "Parameters" : {
                       "FileDigest" : "/fd SHA256"
                   },
                   "ToolName" : "sign",
                   "ToolVersion" : "1.0"
               },
               {
                   "KeyCode" : "CP-233016",
                   "OperationCode" : "OpcVerify",
                   "Parameters" : {},
                   "ToolName" : "sign",
                   "ToolVersion" : "1.0"
               }
              ]

        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish SBoM'
            targetPath: '$(buildOutRoot)\_manifest'
            artifactName: 'SBoM'
            publishLocation: 'pipeline'

          - output: pipelineArtifact
            displayName: 'Publish VSIX artifact'
            targetPath: '$(buildOutRoot)\MsixPackagingExtension.vsix'
            artifactName: 'VSIX'
            publishLocation: 'pipeline'

          # Publish privately
          # Use different task IDs from public extension to prevent clashing.
          - output: adoExtension
            displayName: 'Publish Extension'
            connectedServiceName: 'Visual Studio Marketplace - MSIX'
            fileType: vsix
            vsixFile: '$(buildOutRoot)\MsixPackagingExtension.vsix'
            extensionId: 'msix-ci-automation-task-dev'
            extensionName: 'MSIX Packaging (Preview)'
            extensionVersion: '$(major).$(minor).$(patch)'
            updateTasksId: true
            extensionVisibility: 'privatepreview'
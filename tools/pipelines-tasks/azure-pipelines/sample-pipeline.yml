# A sample pipeline using the tasks.

# The pipeline expects to have a secure file named certificate.pfx
# and a secret variable called Password.

variables:
  tasksRoot: 'tools/pipelines-tasks'
  solution: '$(tasksRoot)/test/assets/HelloWorldUWPApp/HelloWorldApp.sln'
  manifest: '$(tasksRoot)/test/assets/HelloWorldUWPApp/Package.appxmanifest'
  platform: 'x86'
  package: '$(Build.ArtifactStagingDirectory)/package.msix'
  avdconfig: '$(tasksRoot)/test/assets/avdInputs.json' # Replace values in this file as per your azure or avd subscription details

pool:
  vmImage: 'windows-latest'

steps:
- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: $(solution)

# Build the package
- task: MsixPackaging@0
  inputs:
    outputPath: $(package)
    solution: $(solution)
    clean: true
    buildConfiguration: release
    buildPlatform: $(platform)
    updateAppVersion: true
    manifestFile: $(manifest)
    appVersion: '1.2.3.4'

- task: MsixSigning@0
  inputs:
    package: $(package)
    certificate: 'certificate.pfx'
    passwordVariable: 'Password'

- task: MsixAppAttach@0
  inputs:
    package: $(package)
    vhdxOutputPath: '$(Build.ArtifactStagingDirectory)/App.vhdx'
    vhdxSize: '5'

- task: AppInstallerFile@0
  inputs:
    package: $(package)
    outputPath: '$(Build.ArtifactStagingDirectory)/App.appinstaller'
    method: 'create'
    fileVersion: '1.0.0.0'
    uri: 'https://example.com/AppInstallerFile'
    mainItemUri: 'https://example.com/App'

- task: AVDAppAttachPublish@0
  inputs:
    vhdxPath: '$(Build.ArtifactStagingDirectory)/App.vhdx'
    connectedServiceNameARM: ''
    resourceGroupName: ''
    storageAccount: ''
    fileShare: ''
    hostPool: ''
    workSpace: ''
    applicationGroup: ''

- task: PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
